/*
Объекты в JavaScript можно организовать в цепочки так, чтобы свойство, не найденное в одном объекте, автоматически искалось бы в другом.
Связующим звеном выступает специальное свойство __proto__
Если один объект имеет специальную ссылку __proto__ на другой объект, то при чтении свойства из него, если свойство отсутствует в самом объекте, оно ищется в объекте __proto__.

Прототипом объекта А называется объект B, свойства и методы которого доступны для объекта A как собственные.
- У любого объекта есть прототип, на который указывает его свойство __proto__ и который также является объектом.
- У любой функции есть ассоциированный с ней объект, на который в контексте функции указывает свойство prototype. В него как в контейнер обычно складывают свойства и методы для работы с определенным классом объектов.
- Такой контейнер автоматически становится прототипом объектов, создаваемых функциями-конструкторами
- Для редактирования прототипной ссылки объекта используют метод Object.create() - он перезаписывает объект заново и выставляет в нем ссылку на нужный прототип.
- Ссылки связанных друг с другом объектов образуют прототипную цепочку, которая лежит в основе прототипного наследования. Ярким примером такого наследования является цепочка узлов DOM модели.
*/

var animal = {
  eats: true,
};
var rabbit = {
  jumps: true,
};

rabbit.__proto__ = animal;

// в rabbit можно найти оба свойства
alert(rabbit.jumps); // true
alert(rabbit.eats); // true

// Метод hasOwnProperty
var animal = {
  eats: true,
};

var rabbit = {
  jumps: true,
  __proto__: animal,
};

alert(rabbit.hasOwnProperty("jumps")); // true: jumps принадлежит rabbit

alert(rabbit.hasOwnProperty("eats")); // false: eats не принадлежит

// преобразование свойств объекта
var animal = {
  eats: true,
};

var rabbit = {
  jumps: true,
  __proto__: animal,
};

for (var key in rabbit) {
  if (!rabbit.hasOwnProperty(key)) continue; // пропустить "не свои" свойства
  alert(key + " = " + rabbit[key]); // выводит только "jumps"
}

// Object.create(null) - используется, чтобы создать "чистый" объект
var data = Object.create(null);
data.text = "Привет";

alert(data.text); // Привет
alert(data.toString); // undefined
